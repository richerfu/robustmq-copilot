/**
 * @fileoverview gRPC-Web generated client stub for broker.mqtt.inner
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: inner.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as inner_pb from './inner_pb'; // proto import: "inner.proto"


export class MQTTBrokerInnerServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorupdateCache = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.inner.MQTTBrokerInnerService/updateCache',
    grpcWeb.MethodType.UNARY,
    inner_pb.UpdateMQTTCacheRequest,
    inner_pb.UpdateMQTTCacheReply,
    (request: inner_pb.UpdateMQTTCacheRequest) => {
      return request.serializeBinary();
    },
    inner_pb.UpdateMQTTCacheReply.deserializeBinary
  );

  updateCache(
    request: inner_pb.UpdateMQTTCacheRequest,
    metadata?: grpcWeb.Metadata | null): Promise<inner_pb.UpdateMQTTCacheReply>;

  updateCache(
    request: inner_pb.UpdateMQTTCacheRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: inner_pb.UpdateMQTTCacheReply) => void): grpcWeb.ClientReadableStream<inner_pb.UpdateMQTTCacheReply>;

  updateCache(
    request: inner_pb.UpdateMQTTCacheRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: inner_pb.UpdateMQTTCacheReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.inner.MQTTBrokerInnerService/updateCache',
        request,
        metadata || {},
        this.methodDescriptorupdateCache,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.inner.MQTTBrokerInnerService/updateCache',
    request,
    metadata || {},
    this.methodDescriptorupdateCache);
  }

  methodDescriptordeleteSession = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.inner.MQTTBrokerInnerService/deleteSession',
    grpcWeb.MethodType.UNARY,
    inner_pb.DeleteSessionRequest,
    inner_pb.DeleteSessionReply,
    (request: inner_pb.DeleteSessionRequest) => {
      return request.serializeBinary();
    },
    inner_pb.DeleteSessionReply.deserializeBinary
  );

  deleteSession(
    request: inner_pb.DeleteSessionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<inner_pb.DeleteSessionReply>;

  deleteSession(
    request: inner_pb.DeleteSessionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: inner_pb.DeleteSessionReply) => void): grpcWeb.ClientReadableStream<inner_pb.DeleteSessionReply>;

  deleteSession(
    request: inner_pb.DeleteSessionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: inner_pb.DeleteSessionReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.inner.MQTTBrokerInnerService/deleteSession',
        request,
        metadata || {},
        this.methodDescriptordeleteSession,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.inner.MQTTBrokerInnerService/deleteSession',
    request,
    metadata || {},
    this.methodDescriptordeleteSession);
  }

  methodDescriptorsendLastWillMessage = new grpcWeb.MethodDescriptor(
    '/broker.mqtt.inner.MQTTBrokerInnerService/sendLastWillMessage',
    grpcWeb.MethodType.UNARY,
    inner_pb.SendLastWillMessageRequest,
    inner_pb.SendLastWillMessageReply,
    (request: inner_pb.SendLastWillMessageRequest) => {
      return request.serializeBinary();
    },
    inner_pb.SendLastWillMessageReply.deserializeBinary
  );

  sendLastWillMessage(
    request: inner_pb.SendLastWillMessageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<inner_pb.SendLastWillMessageReply>;

  sendLastWillMessage(
    request: inner_pb.SendLastWillMessageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: inner_pb.SendLastWillMessageReply) => void): grpcWeb.ClientReadableStream<inner_pb.SendLastWillMessageReply>;

  sendLastWillMessage(
    request: inner_pb.SendLastWillMessageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: inner_pb.SendLastWillMessageReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/broker.mqtt.inner.MQTTBrokerInnerService/sendLastWillMessage',
        request,
        metadata || {},
        this.methodDescriptorsendLastWillMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/broker.mqtt.inner.MQTTBrokerInnerService/sendLastWillMessage',
    request,
    metadata || {},
    this.methodDescriptorsendLastWillMessage);
  }

}

