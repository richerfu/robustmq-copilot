/**
 * @fileoverview gRPC-Web generated client stub for journal.inner
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: inner.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as inner_pb from './inner_pb'; // proto import: "inner.proto"


export class JournalServerInnerServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorUpdateCache = new grpcWeb.MethodDescriptor(
    '/journal.inner.JournalServerInnerService/UpdateCache',
    grpcWeb.MethodType.UNARY,
    inner_pb.UpdateJournalCacheRequest,
    inner_pb.UpdateJournalCacheReply,
    (request: inner_pb.UpdateJournalCacheRequest) => {
      return request.serializeBinary();
    },
    inner_pb.UpdateJournalCacheReply.deserializeBinary
  );

  updateCache(
    request: inner_pb.UpdateJournalCacheRequest,
    metadata?: grpcWeb.Metadata | null): Promise<inner_pb.UpdateJournalCacheReply>;

  updateCache(
    request: inner_pb.UpdateJournalCacheRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: inner_pb.UpdateJournalCacheReply) => void): grpcWeb.ClientReadableStream<inner_pb.UpdateJournalCacheReply>;

  updateCache(
    request: inner_pb.UpdateJournalCacheRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: inner_pb.UpdateJournalCacheReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/journal.inner.JournalServerInnerService/UpdateCache',
        request,
        metadata || {},
        this.methodDescriptorUpdateCache,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/journal.inner.JournalServerInnerService/UpdateCache',
    request,
    metadata || {},
    this.methodDescriptorUpdateCache);
  }

  methodDescriptorDeleteShardFile = new grpcWeb.MethodDescriptor(
    '/journal.inner.JournalServerInnerService/DeleteShardFile',
    grpcWeb.MethodType.UNARY,
    inner_pb.DeleteShardFileRequest,
    inner_pb.DeleteShardFileReply,
    (request: inner_pb.DeleteShardFileRequest) => {
      return request.serializeBinary();
    },
    inner_pb.DeleteShardFileReply.deserializeBinary
  );

  deleteShardFile(
    request: inner_pb.DeleteShardFileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<inner_pb.DeleteShardFileReply>;

  deleteShardFile(
    request: inner_pb.DeleteShardFileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: inner_pb.DeleteShardFileReply) => void): grpcWeb.ClientReadableStream<inner_pb.DeleteShardFileReply>;

  deleteShardFile(
    request: inner_pb.DeleteShardFileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: inner_pb.DeleteShardFileReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/journal.inner.JournalServerInnerService/DeleteShardFile',
        request,
        metadata || {},
        this.methodDescriptorDeleteShardFile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/journal.inner.JournalServerInnerService/DeleteShardFile',
    request,
    metadata || {},
    this.methodDescriptorDeleteShardFile);
  }

  methodDescriptorGetShardDeleteStatus = new grpcWeb.MethodDescriptor(
    '/journal.inner.JournalServerInnerService/GetShardDeleteStatus',
    grpcWeb.MethodType.UNARY,
    inner_pb.GetShardDeleteStatusRequest,
    inner_pb.GetShardDeleteStatusReply,
    (request: inner_pb.GetShardDeleteStatusRequest) => {
      return request.serializeBinary();
    },
    inner_pb.GetShardDeleteStatusReply.deserializeBinary
  );

  getShardDeleteStatus(
    request: inner_pb.GetShardDeleteStatusRequest,
    metadata?: grpcWeb.Metadata | null): Promise<inner_pb.GetShardDeleteStatusReply>;

  getShardDeleteStatus(
    request: inner_pb.GetShardDeleteStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: inner_pb.GetShardDeleteStatusReply) => void): grpcWeb.ClientReadableStream<inner_pb.GetShardDeleteStatusReply>;

  getShardDeleteStatus(
    request: inner_pb.GetShardDeleteStatusRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: inner_pb.GetShardDeleteStatusReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/journal.inner.JournalServerInnerService/GetShardDeleteStatus',
        request,
        metadata || {},
        this.methodDescriptorGetShardDeleteStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/journal.inner.JournalServerInnerService/GetShardDeleteStatus',
    request,
    metadata || {},
    this.methodDescriptorGetShardDeleteStatus);
  }

  methodDescriptorDeleteSegmentFile = new grpcWeb.MethodDescriptor(
    '/journal.inner.JournalServerInnerService/DeleteSegmentFile',
    grpcWeb.MethodType.UNARY,
    inner_pb.DeleteSegmentFileRequest,
    inner_pb.DeleteSegmentFileReply,
    (request: inner_pb.DeleteSegmentFileRequest) => {
      return request.serializeBinary();
    },
    inner_pb.DeleteSegmentFileReply.deserializeBinary
  );

  deleteSegmentFile(
    request: inner_pb.DeleteSegmentFileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<inner_pb.DeleteSegmentFileReply>;

  deleteSegmentFile(
    request: inner_pb.DeleteSegmentFileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: inner_pb.DeleteSegmentFileReply) => void): grpcWeb.ClientReadableStream<inner_pb.DeleteSegmentFileReply>;

  deleteSegmentFile(
    request: inner_pb.DeleteSegmentFileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: inner_pb.DeleteSegmentFileReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/journal.inner.JournalServerInnerService/DeleteSegmentFile',
        request,
        metadata || {},
        this.methodDescriptorDeleteSegmentFile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/journal.inner.JournalServerInnerService/DeleteSegmentFile',
    request,
    metadata || {},
    this.methodDescriptorDeleteSegmentFile);
  }

  methodDescriptorGetSegmentDeleteStatus = new grpcWeb.MethodDescriptor(
    '/journal.inner.JournalServerInnerService/GetSegmentDeleteStatus',
    grpcWeb.MethodType.UNARY,
    inner_pb.GetSegmentDeleteStatusRequest,
    inner_pb.GetSegmentDeleteStatusReply,
    (request: inner_pb.GetSegmentDeleteStatusRequest) => {
      return request.serializeBinary();
    },
    inner_pb.GetSegmentDeleteStatusReply.deserializeBinary
  );

  getSegmentDeleteStatus(
    request: inner_pb.GetSegmentDeleteStatusRequest,
    metadata?: grpcWeb.Metadata | null): Promise<inner_pb.GetSegmentDeleteStatusReply>;

  getSegmentDeleteStatus(
    request: inner_pb.GetSegmentDeleteStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: inner_pb.GetSegmentDeleteStatusReply) => void): grpcWeb.ClientReadableStream<inner_pb.GetSegmentDeleteStatusReply>;

  getSegmentDeleteStatus(
    request: inner_pb.GetSegmentDeleteStatusRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: inner_pb.GetSegmentDeleteStatusReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/journal.inner.JournalServerInnerService/GetSegmentDeleteStatus',
        request,
        metadata || {},
        this.methodDescriptorGetSegmentDeleteStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/journal.inner.JournalServerInnerService/GetSegmentDeleteStatus',
    request,
    metadata || {},
    this.methodDescriptorGetSegmentDeleteStatus);
  }

}

